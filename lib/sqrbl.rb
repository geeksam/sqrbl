# This file is part of SQrbL, which is free software licensed under v3 of the GNU GPL.
# For more information, please see README.txt and LICENSE.txt in the project's root directory.
#
# Most of this was autogenerated by the 'bones' gem.
# The primary domain-specific method of interest here is Sqrbl.migration.
module Sqrbl

  # :stopdoc:
  VERSION = '0.1.0'
  LIBPATH = ::File.expand_path(::File.dirname(__FILE__)) + ::File::SEPARATOR
  PATH    = ::File.dirname(LIBPATH) + ::File::SEPARATOR
  # :startdoc:

  # Returns the version string for the library.
  #
  def self.version
    VERSION
  end

  # Returns the library path for the module. If any arguments are given,
  # they will be joined to the end of the libray path using
  # <tt>File.join</tt>.
  #
  def self.libpath( *args )
    args.empty? ? LIBPATH : ::File.join(LIBPATH, args.flatten)
  end

  # Returns the lpath for the module. If any arguments are given,
  # they will be joined to the end of the path using
  # <tt>File.join</tt>.
  #
  def self.path( *args )
    args.empty? ? PATH : ::File.join(PATH, args.flatten)
  end

  # Utility method used to require all files ending in .rb that lie in the
  # directory below this file that has the same name as the filename passed
  # in. Optionally, a specific _directory_ name can be passed in such that
  # the _filename_ does not have to be equivalent to the directory.
  #
  def self.require_all_libs_relative_to( fname, dir = nil )
    dir ||= ::File.basename(fname, '.*')
    search_me = ::File.expand_path(
        ::File.join(::File.dirname(fname), dir, '**', '*.rb'))

    Dir.glob(search_me).sort.each {|rb| require rb}
  end

  # Convenience method:  builds and writes a migration in one go.
  def self.migration(&block)
    returning(build_migration(&block)) do |mig|
      write_migration!(mig)
    end
  end

  # Convenience method:  Calls Sqrbl::Migration.build and passes it the given block.
  def self.build_migration(&block)
    Sqrbl::Migration.build(&block)
  end

  # Convenience method:  Write a Migration using all subclasses of BaseMigrationWriter.
  def self.write_migration!(migration)
    BaseMigrationWriter.subclasses.each do |writer_class|
      writer_class.write_migration!(migration)
    end
  end

  # Returns the string, in lower case, with whitespace converted to underscores
  # and all non-alphanumeric characters removed.
  def self.calculate_unix_name(string)
    string.gsub(/\s+/, '_').downcase.gsub(/[^a-z0-9_]/, '')
  end

end  # module Sqrbl

#--
# TODO: figure out how to do autoload on const_missing
#++
Sqrbl.require_all_libs_relative_to(__FILE__, 'core_exts')
Sqrbl.require_all_libs_relative_to(__FILE__, 'sqrbl/mixins')
Sqrbl.require_all_libs_relative_to(__FILE__)

# EOF
